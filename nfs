
скачивание проги с гитхуба для автоматического создания папок и мамок

git clone https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner.git


# Set the subject of the RBAC objects to the current namespace where the provisioner is being deployed
$ NS=$(kubectl config get-contexts|grep -e "^\*" |awk '{print $5}')
$ NAMESPACE=${NS:-default}
$ sed -i'' "s/namespace:.*/namespace: $NAMESPACE/g" ./deploy/rbac.yaml ./deploy/deployment.yaml
$ kubectl create -f deploy/rbac.yaml

В файле nfs-subdir-external-provisioner/deploy/deployment.yaml
          env:
            - name: PROVISIONER_NAME
              value: k8s-sigs.io/nfs-subdir-external-provisioner
            - name: NFS_SERVER
              value: <YOUR NFS SERVER HOSTNAME> -- ip nfs 
            - name: NFS_PATH
              value: /var/nfs
      volumes:
        - name: nfs-client-root
          nfs:
            server: <YOUR NFS SERVER HOSTNAME>  -- ip nfs 
            path: /var/nfs

Н

Теперь мы протестируем внешний поддир NFS.

Развертывать:

$ kubectl create -f deploy/test-claim.yaml -f deploy/test-pod.yaml
Теперь проверьте наличие файла на сервере NFS.SUCCESS

kubectl delete -f deploy/test-pod.yaml -f deploy/test-claim.yaml
Теперь проверьте, что папка удалена.



Развертывание собственных PersistentVolumeClaims

Чтобы развернуть собственный ПВХ, убедитесь, что у вас есть правильный, как указано в вашем файле.storageClassNamedeploy/class.yaml

Например:

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: test-claim
  annotations:    <<< це ненадо
    nfs.io/storage-path: "test-path" # not required, depending on whether this annotation was shown in the storage class description
spec:
  storageClassName: managed-nfs-storage
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Mi

managed-nfs-storage - подставляется под это storageClassName и используется везде 

deploy/class.yaml >>> оттуда берем из "name"(managed-nfs-storage)
 |
 | ---там вот так
 |

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: managed-nfs-storage
provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment's env PROVISIONER_NAME'
parameters:
  pathPattern: "${.PVC.namespace}/${.PVC.annotations.nfs.io/storage-path}" # waits for nfs.io/storage-path annotation, if not specified will accept as empty string.
  onDelete: delete
|||||||

